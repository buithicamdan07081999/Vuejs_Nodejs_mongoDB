const User = require("../models/userModel");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");

// ƒêƒÉng k√Ω user
const registerUser = async (req, res) => {
    try {
      const { name, email, password } = req.body;
      
      console.log("üì© D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c:", req.body);
  
      // Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i ch∆∞a
      const existingUser = await User.findOne({ email });
      if (existingUser) {
        return res.status(400).json({ message: "Email ƒë√£ t·ªìn t·∫°i!" });
      }
  
      // M√£ h√≥a m·∫≠t kh·∫©u
      const salt = await bcrypt.genSalt(10);
      const hashedPassword = await bcrypt.hash(password, salt);
      
      console.log("üîë M·∫≠t kh·∫©u sau khi hash:", hashedPassword);
  
      // L∆∞u user v√†o DB
      const newUser = new User({ name, email, password: hashedPassword });
      await newUser.save();
  
      res.status(201).json({ message: "ƒêƒÉng k√Ω th√†nh c√¥ng!" });
    } catch (error) {
      console.error("üî• L·ªói server:", error);
      res.status(500).json({ message: "L·ªói server", error: error.message });
    }
  };

// ƒêƒÉng nh·∫≠p user
const loginUser = async (req, res) => {
    try {
      const { email, password } = req.body;
      console.log("üì© D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c:", req.body);
  
      const user = await User.findOne({ email });
  
      if (!user) {
        return res.status(400).json({ message: "Email kh√¥ng t·ªìn t·∫°i!" });
      }
  
      console.log("üîê M·∫≠t kh·∫©u nh·∫≠p:", password);
      console.log("üóÑ M·∫≠t kh·∫©u trong DB:", user.password);
  
      // So s√°nh m·∫≠t kh·∫©u nh·∫≠p v√†o v·ªõi m·∫≠t kh·∫©u trong database
      const isMatch = await bcrypt.compare(password, user.password); // üî• S·ª≠a l·ªói ·ªü ƒë√¢y
      console.log("‚úÖ K·∫øt qu·∫£ so s√°nh:", isMatch);
  
      if (!isMatch) {
        return res.status(400).json({ message: "Sai m·∫≠t kh·∫©u!" });
      }
  
      res.json({ message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng!" });
    } catch (error) {
      console.error("üî• L·ªói server:", error);
      res.status(500).json({ message: "L·ªói server", error: error.message });
    }
  };

// L·∫•y th√¥ng tin user
const getUserProfile = async (req, res) => {
    try {
        const user = await User.findById(req.user.userId).select("-password");
        if (!user) {
            return res.status(404).json({ message: "User kh√¥ng t·ªìn t·∫°i!" });
        }

        res.json(user);
    } catch (error) {
        res.status(500).json({ message: "L·ªói server", error: error.message });
    }
};

module.exports = { registerUser, loginUser, getUserProfile };
// registerUser: Ki·ªÉm tra email t·ªìn t·∫°i ch∆∞a, m√£ h√≥a password, l∆∞u v√†o DB.
// loginUser: Ki·ªÉm tra email & password, t·∫°o token JWT.
// getUserProfile: L·∫•y th√¥ng tin user (tr·ª´ password).